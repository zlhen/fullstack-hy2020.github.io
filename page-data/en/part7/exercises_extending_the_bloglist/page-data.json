{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part7/exercises_extending_the_bloglist","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>In addition to the eight exercises in the <a href=\"/en/part7/react_router\">React router</a> and <a href=\"\">custom hooks</a> sections of this seventh part of the course material, there are 13 exercises that continue our work on the Bloglist application that we worked on in parts four and five of the course material. Some of the following exercises are \"features\" that are independent of one another, meaning that there is no need to finish the exercises in any particular order. You are free to skip over a part of the exercises if you wish to do so.</p>\n<p>If you do not want to use your own Bloglist application, you are free to use the code from the model solution as a starting point for these exercises.</p>\n<p>Many of the exercises in this part of the course material will require the refactoring of existing code. This is a common reality of extending existing applications, meaning that refactoring is an important and necessary skill even if it may feel difficult and unpleasant at times.</p>\n<p>One good piece of advice for both refactoring and writing new code is to take <i> baby steps</i>. Losing your sanity is almost guaranteed if you leave the application in a completely broken state for long periods of time while refactoring.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 7.9.-7.21.</h3>\n<h4>7.9: redux, step1</h4>\n<p>Refactor the application from using internal React component state to using Redux for the application's state management.</p>\n<p>Change the application's notifications to use Redux at this point of the exercise set.</p>\n<h4>7.10: redux, step2</h4>\n<p><em>Note</em> that this and the next two exercises are quite laborious but incredibly educational.</p>\n<p>Store the information about blog posts in the Redux store. In this exercise it is enough that you can see the blogs in backend and create a new blog.</p>\n<p>You are free to manage the state for logging in and creating new blog posts by using the internal state of React components.</p>\n<h4>7.11: redux, step3</h4>\n<p>Expand your solution so that it is again possible to like and delete a blog.</p>\n<h4>7.12: redux, step4</h4>\n<p>Store the information about the signed in user in the Redux store.</p>\n<h4>7.13: Users view</h4>\n<p>Implement a view to the application that displays all of the basic information related to users:</p>\n<picture><img src=\"/static/84f414833029834ab295d900b4506288/5a190/41.png\" srcset=\"/static/84f414833029834ab295d900b4506288/772e8/41.png 200w,\n/static/84f414833029834ab295d900b4506288/e17e5/41.png 400w,\n/static/84f414833029834ab295d900b4506288/5a190/41.png 800w,\n/static/84f414833029834ab295d900b4506288/c1b63/41.png 1200w,\n/static/84f414833029834ab295d900b4506288/f098e/41.png 1506w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>7.14: Individual user view</h4>\n<p>Implement a view for individual users, that displays all of the blog posts added by that user:</p>\n<picture><img src=\"/static/734b72fb3dbef4f7aea9d59792deefbb/5a190/44.png\" srcset=\"/static/734b72fb3dbef4f7aea9d59792deefbb/772e8/44.png 200w,\n/static/734b72fb3dbef4f7aea9d59792deefbb/e17e5/44.png 400w,\n/static/734b72fb3dbef4f7aea9d59792deefbb/5a190/44.png 800w,\n/static/734b72fb3dbef4f7aea9d59792deefbb/c1b63/44.png 1200w,\n/static/734b72fb3dbef4f7aea9d59792deefbb/29007/44.png 1600w,\n/static/734b72fb3dbef4f7aea9d59792deefbb/6a5c3/44.png 1646w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can access the view by clicking the name of the user in the view that lists all users:</p>\n<picture><img src=\"/static/5b65931c400b7b6ffb12f98292443ca7/5a190/43.png\" srcset=\"/static/5b65931c400b7b6ffb12f98292443ca7/772e8/43.png 200w,\n/static/5b65931c400b7b6ffb12f98292443ca7/e17e5/43.png 400w,\n/static/5b65931c400b7b6ffb12f98292443ca7/5a190/43.png 800w,\n/static/5b65931c400b7b6ffb12f98292443ca7/c1b63/43.png 1200w,\n/static/5b65931c400b7b6ffb12f98292443ca7/29007/43.png 1600w,\n/static/5b65931c400b7b6ffb12f98292443ca7/6ee58/43.png 1640w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><i><strong>NB:</strong></i> you will almost certainly stumble across the following error message during this exercise:</p>\n<picture><img src=\"/static/234cc8fff2ab768e6be37dce49577ce8/5a190/42ea.png\" srcset=\"/static/234cc8fff2ab768e6be37dce49577ce8/772e8/42ea.png 200w,\n/static/234cc8fff2ab768e6be37dce49577ce8/e17e5/42ea.png 400w,\n/static/234cc8fff2ab768e6be37dce49577ce8/5a190/42ea.png 800w,\n/static/234cc8fff2ab768e6be37dce49577ce8/c1b63/42ea.png 1200w,\n/static/234cc8fff2ab768e6be37dce49577ce8/29007/42ea.png 1600w,\n/static/234cc8fff2ab768e6be37dce49577ce8/eb1d2/42ea.png 1622w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The error message will occur if you refresh the page for an individual user.</p>\n<p>The cause of the issue is that when we navigate directly to the page of an individual user, the React application has not yet received the data from the backend. One solution for fixing the problem is to use conditional rendering:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>7.15: Blog view</h4>\n<p>Implement a separate view for blog posts. You can model the layout of your view after the following example:</p>\n<picture><img src=\"/static/905fa91b8e113f0ad6d27208ee323b48/5a190/45.png\" srcset=\"/static/905fa91b8e113f0ad6d27208ee323b48/772e8/45.png 200w,\n/static/905fa91b8e113f0ad6d27208ee323b48/e17e5/45.png 400w,\n/static/905fa91b8e113f0ad6d27208ee323b48/5a190/45.png 800w,\n/static/905fa91b8e113f0ad6d27208ee323b48/c1b63/45.png 1200w,\n/static/905fa91b8e113f0ad6d27208ee323b48/6bfbb/45.png 1514w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Users should be able to access the view by clicking the name of the blog post in the view that lists of all of the blog posts.</p>\n<picture><img src=\"/static/c09f5edd6f34e77cd390864bd7156790/5a190/46.png\" srcset=\"/static/c09f5edd6f34e77cd390864bd7156790/772e8/46.png 200w,\n/static/c09f5edd6f34e77cd390864bd7156790/e17e5/46.png 400w,\n/static/c09f5edd6f34e77cd390864bd7156790/5a190/46.png 800w,\n/static/c09f5edd6f34e77cd390864bd7156790/c1b63/46.png 1200w,\n/static/c09f5edd6f34e77cd390864bd7156790/64639/46.png 1568w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>After you're done with this exercise, the functionality that was implemented in exercise 5.6 is no longer necessary. Clicking a blog post no longer needs to expand the item in the list and display the details of the blog post.</p>\n<h4>7.16: Navigation</h4>\n<p>Implement a navigation menu for the application:</p>\n<picture><img src=\"/static/2d374d8414645cb6f50293298e00d189/5a190/47.png\" srcset=\"/static/2d374d8414645cb6f50293298e00d189/772e8/47.png 200w,\n/static/2d374d8414645cb6f50293298e00d189/e17e5/47.png 400w,\n/static/2d374d8414645cb6f50293298e00d189/5a190/47.png 800w,\n/static/2d374d8414645cb6f50293298e00d189/c1b63/47.png 1200w,\n/static/2d374d8414645cb6f50293298e00d189/29007/47.png 1600w,\n/static/2d374d8414645cb6f50293298e00d189/dcb79/47.png 1700w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>7.17: comments, step1</h4>\n<p>Implement the functionality for commenting on blog posts:</p>\n<picture><img src=\"/static/8021a34f357d8764c0b01c8549b43d40/5a190/48.png\" srcset=\"/static/8021a34f357d8764c0b01c8549b43d40/772e8/48.png 200w,\n/static/8021a34f357d8764c0b01c8549b43d40/e17e5/48.png 400w,\n/static/8021a34f357d8764c0b01c8549b43d40/5a190/48.png 800w,\n/static/8021a34f357d8764c0b01c8549b43d40/c1b63/48.png 1200w,\n/static/8021a34f357d8764c0b01c8549b43d40/29007/48.png 1600w,\n/static/8021a34f357d8764c0b01c8549b43d40/1e5d2/48.png 1630w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Comments should be anonymous, meaning that they are not associated to the user who left the comment.</p>\n<p>In this exercise it is enough for the frontend to only display the comments that the application receives from the backend.</p>\n<p>An appropriate mechanism for adding comments to a blog post would be an HTTP POST request to the <i>api/blogs/:id/comments</i> endpoint.</p>\n<h4>7.18: comments, step2</h4>\n<p>Extend your application so that users can add comments to blog posts from the frontend:</p>\n<picture><img src=\"/static/caed74a4c6e3833de7cd7bb6b224c67c/5a190/49.png\" srcset=\"/static/caed74a4c6e3833de7cd7bb6b224c67c/772e8/49.png 200w,\n/static/caed74a4c6e3833de7cd7bb6b224c67c/e17e5/49.png 400w,\n/static/caed74a4c6e3833de7cd7bb6b224c67c/5a190/49.png 800w,\n/static/caed74a4c6e3833de7cd7bb6b224c67c/c1b63/49.png 1200w,\n/static/caed74a4c6e3833de7cd7bb6b224c67c/36eca/49.png 1526w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>7.19: Styles, step1</h4>\n<p>Improve the appearance of your application by applying one of the methods shown in the course material.</p>\n<h4>7.20: Styles, step2</h4>\n<p>You can mark this exercise as finished if you use an hour or more for styling your application.</p>\n<h4>7.21: Course feedback</h4>\n<p>How did we do? Give us some feedback for the course in Moodle!</p>\n<p>This was the last exercise for this part of the course and it's time to push your code to GitHub and mark all of your finished exercises to the <a href=\"https://studies.cs.helsinki.fi/stats/courses/fullstackopen\">exercise submission system</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/2184b1c35920cfc7a09e10660dea04eb/part-7.svg"},"part":7,"letter":"f","lang":"en"}}},"pageContext":{"part":7,"letter":"f","lang":"en"}}}