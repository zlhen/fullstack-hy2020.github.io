{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part8/react_and_graph_ql","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>We will next implement a React-app which uses the GraphQL server we created.</p>\n<p>The current code of the server can be found on <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-backend/tree/part8-3\">Github</a>, branch <i>part8-3</i>.</p>\n<p>In theory, we could use GraphQL with HTTP POST -requests. The following shows an example of this with Postman. </p>\n<picture><img src=\"/static/70a60c28934e97ddcae170c6ab488138/5a190/8.png\" srcset=\"/static/70a60c28934e97ddcae170c6ab488138/772e8/8.png 200w,\n/static/70a60c28934e97ddcae170c6ab488138/e17e5/8.png 400w,\n/static/70a60c28934e97ddcae170c6ab488138/5a190/8.png 800w,\n/static/70a60c28934e97ddcae170c6ab488138/c1b63/8.png 1200w,\n/static/70a60c28934e97ddcae170c6ab488138/c211c/8.png 1502w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The communication works by sending HTTP POST -requests to <a href=\"http://localhost:4000/graphql\">http://localhost:4000/graphql</a>. The query itself is a string sent as the value of the key <i>query</i>.</p>\n<p>We could take care of the communication between the React-app and GraphQl by using Axios. However most of the time it is not very sensible to do so. It is a better idea to use a higher order library capable of abstracting the unnecessary details of the communication. </p>\n<p>At the moment there are two good options: <a href=\"https://facebook.github.io/relay/\">Relay</a> by Facebook and <a href=\"https://www.apollographql.com/docs/react/\">Apollo Client</a>. From these two Apollo is absolutely more popular, and we will also be using it. </p>\n<h3>Apollo client</h3>\n<!-- Käytetään kurssilla Apollo Clientin versiota [3.0-beta](https://www.apollographql.com/docs/react/v3.0-beta/), tällä hetkellä (20.2.2020) uusin virallisesti julkaisatu versio on 2.6. eli kun luet dokumentaatiota, muista vaihtaa näytettävän dokumentaation versio vastaamaan 3.0 betaa: -->\n<p>In this course we will use the version <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/\">3.0-beta</a> of Apollo Client.\nAt the moment (20.2.2020) 2.6 is the latest officially released version, so when you are reading the documentation remember to select the documentation of 3.0 beta:</p>\n<picture><img src=\"/static/35e86a1ec2800723f4e5c07c383ee2bc/5a190/40ea.png\" srcset=\"/static/35e86a1ec2800723f4e5c07c383ee2bc/772e8/40ea.png 200w,\n/static/35e86a1ec2800723f4e5c07c383ee2bc/e17e5/40ea.png 400w,\n/static/35e86a1ec2800723f4e5c07c383ee2bc/5a190/40ea.png 800w,\n/static/35e86a1ec2800723f4e5c07c383ee2bc/c1b63/40ea.png 1200w,\n/static/35e86a1ec2800723f4e5c07c383ee2bc/f2f8c/40ea.png 1490w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Create a new React-app and install the dependencies required by <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/get-started/#installation\">Apollo client</a>.</p>\n<!-- Luodaan uusi React-sovellus ja asennetaan siihen [Apollo clientin](https://www.apollographql.com/docs/react/get-started/#installation) vaatimat riippuvuudet. -->\n<p>We'll create a new React application and install the dependencies required by <a href=\"https://www.apollographql.com/docs/react/get-started/#installation\">Apollo client</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @apollo/client graphql</code></pre></div>\n<p>We'll start with the following code for our application. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient<span class=\"token punctuation\">,</span> HttpLink<span class=\"token punctuation\">,</span> InMemoryCache<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  link<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    uri<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:4000'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nquery {\n  allPersons  {\n    name,\n    phone,\n    address {\n      street,\n      city\n    }\n    id\n  }\n}\n</span><span class=\"token template-punctuation string\">`</span></span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The beginning of the code creates a new <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/get-started/#create-a-client\">client</a> - object, which is then used to send a query to the server: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The servers response is printed to the console: </p>\n<picture><img src=\"/static/dc57bab4b03027308b958e6271cfc1bb/5a190/9a.png\" srcset=\"/static/dc57bab4b03027308b958e6271cfc1bb/772e8/9a.png 200w,\n/static/dc57bab4b03027308b958e6271cfc1bb/e17e5/9a.png 400w,\n/static/dc57bab4b03027308b958e6271cfc1bb/5a190/9a.png 800w,\n/static/dc57bab4b03027308b958e6271cfc1bb/c1b63/9a.png 1200w,\n/static/dc57bab4b03027308b958e6271cfc1bb/29007/9a.png 1600w,\n/static/dc57bab4b03027308b958e6271cfc1bb/166a3/9a.png 1980w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The application can communicate with a GraphQL server using the <em>client</em> object. The client can be made accessible for all components of the application by wrapping the <i>App</i> component with <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/get-started/#connect-your-client-to-react\">ApolloProvider</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> \n<span class=\"gatsby-highlight-code-line\">  ApolloClient<span class=\"token punctuation\">,</span> ApolloProvider<span class=\"token punctuation\">,</span> HttpLink<span class=\"token punctuation\">,</span> InMemoryCache</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span> \n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  link<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    uri<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:4000'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span>ApolloProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ApolloProvider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span></span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Making queries</h3>\n<p>We are ready to implement the main view of the application, which shows a list of phone numbers. </p>\n<!-- Apollo Client tarjoaa muutaman vaihtoehtoisen tavan [kyselyjen](https://www.apollographql.com/docs/react/v3.0-beta/data/queries/) tekemiselle. Tämän hetken vallitseva käytäntö on hook-funktion [useQuery](https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#usequery) käyttäminen. -->\n<p>Apollo Client offers a few alternatives for making <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/data/queries/\">queries</a>.\nCurrently the use of the hook-function <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#usequery\">useQuery</a> is the dominant practice.</p>\n<!-- Kyselyn tekevän komponentin <i>App</i> koodi näyttää seuraavalta: -->\n<p>The query is made by the <i>App</i> component, which's code is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> gql<span class=\"token punctuation\">,</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nquery {\n  allPersons  {\n    name\n    phone\n    id\n  }\n}\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<!-- Hook-funktion _useQuery_ kutsuminen suorittaa parametrina annetun kyselyn. Hookin kutsuminen palauttaa olion, joka -->\n<!-- jolla on [useita kenttiä](https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#result). Kenttä <i>loading</i> on arvoltaan tosi, jos kyselyyn ei ole saatu vielä vastausta. Tässä tilanteessa renderöitävä koodi on  -->\n<p>When called, <em>useQuery</em> makes the query it receives as a parameter.\nIt returns an object with multiple <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#result\">fields</a>.\nThe field <i>loading</i> is true if the query has not received a response yet.\nThen the following code gets rendered:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>loading <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- Kun tulos on valmis, otetaan tuloksen kentästä <i>data</i> kyselyn <i>allPersons</i> vastaus ja renderöidään luettelossa olevat nimet ruudulle. -->\n<p>When response is received, the result of the <i>allPersons</i> query can be found from the <i>data</i> field, and we can render the list of names to the screen.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<!-- Eriytetään henkilöiden näyttäminen omaan komponenttiin -->\n<p>Let's separate displaying the list of persons into its own component</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Persons</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> persons <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Persons<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span>\n        <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>  \n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- Komponentti _App_ siis hoitaa edelleen kyselyn ja välittää tuloksen uuden komponentin renderöitäväksi: -->\n<p>The <em>App</em> component still makes the query, and passes the result to the new component to be rendered:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Persons persons <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Named queries and variables</h3>\n<p>Let's implement functionality for viewing the address details of a person. The <i>findPerson</i> query is well suited for this. </p>\n<p>The queries we did in the last chapter had the parameter hardcoded into the query:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    phone \n    city \n    street\n    id\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we do queries programmatically, we must be able to give them parameters dynamically. </p>\n<p>GraphQL <a href=\"https://graphql.org/learn/queries/#variables\">variables</a> are well suited for this. To be able to use variables, we must also name our queries. </p>\n<!-- Sopiva muoto kyselylle on seuraava: -->\n<p>A good format for the query is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token function\">findPersonByName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$nameToSearch<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token operator\">:</span> $nameToSearch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    phone \n    address <span class=\"token punctuation\">{</span>\n      street\n      city\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The name of the query is <i>findPersonByName</i>, and it is given a string <i>$nameToSearch</i> as a parameter. </p>\n<p>It is also possible to do queries with parameters with the GraphQL Playground. The parameters are given in <i>Query variables</i>:</p>\n<picture><img src=\"/static/db68c3eeadc2cf4514b6ebc38025c5c1/5a190/10.png\" srcset=\"/static/db68c3eeadc2cf4514b6ebc38025c5c1/772e8/10.png 200w,\n/static/db68c3eeadc2cf4514b6ebc38025c5c1/e17e5/10.png 400w,\n/static/db68c3eeadc2cf4514b6ebc38025c5c1/5a190/10.png 800w,\n/static/db68c3eeadc2cf4514b6ebc38025c5c1/c1b63/10.png 1200w,\n/static/db68c3eeadc2cf4514b6ebc38025c5c1/29007/10.png 1600w,\n/static/db68c3eeadc2cf4514b6ebc38025c5c1/896c7/10.png 1938w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- Asken käyttämämme _useQuery_ toimii hyvin tilanteissa, joissa kysely on tarkoitus suorittaa heti komponentin renderöinnin yhteydessä. Nyt kuitenkin haluamme tehdä kyselyn vasta siinä vaiheessa kun käyttäjä haluaa nähdä jonkin henkilön tiedot, eli kysely tehdään vasta [sitä tarvittaessa](https://www.apollographql.com/docs/react/v3.0-beta/data/queries/#executing-queries-manually).  -->\n<p>The <em>useQuery</em> hook is well suited for situations where the query is done when the component is rendered.\nHowever now we want to make the query only when a user wants to see the details of a specific person, so the query is done only <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/data/queries/#executing-queries-manually\">as required</a>.</p>\n<!-- Tähän tilanteeseen sopii hook-funktio [useLazyQuery](https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#uselazyquery). Komponentti <i>Persons</i> muuttuu seuraavasti: -->\n<p>For this this situation the hook-function <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#uselazyquery\">useLazyQuery</a> is a good choice.\nThe <i>Persons</i> component becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token constant\">FIND_PERSON</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span><span class=\"gatsby-highlight-code-line\">  query findPersonByName($nameToSearch: String!) {</span><span class=\"gatsby-highlight-code-line\">    findPerson(name: $nameToSearch) {</span><span class=\"gatsby-highlight-code-line\">      name</span><span class=\"gatsby-highlight-code-line\">      phone </span><span class=\"gatsby-highlight-code-line\">      id</span><span class=\"gatsby-highlight-code-line\">      address {</span><span class=\"gatsby-highlight-code-line\">        street</span><span class=\"gatsby-highlight-code-line\">        city</span><span class=\"gatsby-highlight-code-line\">      }</span><span class=\"gatsby-highlight-code-line\">    }</span><span class=\"gatsby-highlight-code-line\">  }</span><span class=\"gatsby-highlight-code-line\"></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Persons</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> persons <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>getPerson<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLazyQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">FIND_PERSON</span><span class=\"token punctuation\">)</span> </span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>person<span class=\"token punctuation\">,</span> setPerson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showPerson</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">getPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> nameToSearch<span class=\"token operator\">:</span> name <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setPerson</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>findPerson<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>city<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPerson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>close<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Persons<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span>\n        <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">            show address</span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> </span>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>  \n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Persons</code></pre></div>\n<!-- Koodi on kasvanut paljon, ja kaikki lisäykset eivät ole täysin ilmeisiä. -->\n<p>The code has changed quite a lot, and all of the changes are not completely apparent. </p>\n<!-- Jos henkilön yhteydessä olevaa nappia painetaan, suoritetaan klikkauksenkäsittelijä _showPerson_, joka tekee GraphQL-kyselyn henkilön tiedoista: -->\n<p>When a person's \"show address\" button is clicked, its event handler\n<em>showPerson</em> is executed, and makes a GraphQL query to fetch the persons details: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>getPerson<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLazyQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">FIND_PERSON</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showPerson</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> nameToSearch<span class=\"token operator\">:</span> name <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- Kyselyn muuttujalle _nameToSearch_ määritellään arvo kutsuttaessa. -->\n<p>The query's <em>nameToSearch</em> variable receives a value when the query is run. </p>\n<!-- Kyselyn vastaus tulee muuttujaan _result_, ja sen arvo sijoitetaan komponentin tilan muutujaan _person_. Sijoitus tehdään _useEffect_-hookissa: -->\n<p>The query response is saved to the variable <em>result</em>, and its value is saved to the component's state <em>person</em> in the <em>useEffect</em> hook. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setPerson</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>findPerson<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- Hookin toisena parametrina on _result.data_, tämä saa aikaan sen, että hookin ensimmäisenä parametrina oleva funktio suoritetaan <i>aina kun kyselyssä haetaan uuden henkilön tiedot</i>. Jos päivitystä ei hoidettaisi kontrolloidusti hookissa, seuraisi ongelmia sen jälkeen kun yksittäisen henkilön näkymästä palataan kaikkien henkilöiden näkymään. -->\n<p>The hook's second parameter is <em>result</em>, so function given to the hook as its second parameter is executed <i>every time the query fetches the details of a different person</i>.\nWould we not handle the update in a controlled way in a hook, returning from a single person view to a list of all persons would cause problems. </p>\n<p>If the state <em>person</em> has a value, instead of showing a list of all persons, only the details of one person are shown. </p>\n<picture><img src=\"/static/6092f1af8a93fbe11fc40b7ab708eec0/5a190/11.png\" srcset=\"/static/6092f1af8a93fbe11fc40b7ab708eec0/772e8/11.png 200w,\n/static/6092f1af8a93fbe11fc40b7ab708eec0/e17e5/11.png 400w,\n/static/6092f1af8a93fbe11fc40b7ab708eec0/5a190/11.png 800w,\n/static/6092f1af8a93fbe11fc40b7ab708eec0/c1b63/11.png 1200w,\n/static/6092f1af8a93fbe11fc40b7ab708eec0/07a9c/11.png 1440w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- Yksittäisen henkilön näkymästä palataan kaikkien henkilöiden näkymään sijoittamalla tilan muuttujan _person_ arvoksi _null_. -->\n<p>When a user wants to return to the persons list, the <em>person</em> state is set to <em>null</em>.</p>\n<p>The solution is not the neatest possible, but it is good enough for us. </p>\n<p>The current code of the application can be found on <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-frontend/tree/part8-1\">Github</a> branch <i>part8-1</i>.</p>\n<h3>Cache</h3>\n<p>When we do multiple queries for example the address details of Arto Hellas, we notice something interesting: The query to the backend is done only the first time around. After this, despite of the same query being done again by the code, the query is not sent to the backend. </p>\n<picture><img src=\"/static/2393546b9b6db7605511693321439519/5a190/12.png\" srcset=\"/static/2393546b9b6db7605511693321439519/772e8/12.png 200w,\n/static/2393546b9b6db7605511693321439519/e17e5/12.png 400w,\n/static/2393546b9b6db7605511693321439519/5a190/12.png 800w,\n/static/2393546b9b6db7605511693321439519/c1b63/12.png 1200w,\n/static/2393546b9b6db7605511693321439519/68638/12.png 1510w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Apollo client saves the responses of queries to <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/caching/cache-configuration/\">cache</a>. To optimize performance if the response to a query is already in the cache, the query is not sent to the server at all. </p>\n<p>It is possible to install <a href=\"https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm/related\">Apollo Client devtools</a> to Chrome to view the state of the cache. </p>\n<picture><img src=\"/static/c69cc11572b1f3bcf1a5ca2dc8bc32bf/5a190/13a.png\" srcset=\"/static/c69cc11572b1f3bcf1a5ca2dc8bc32bf/772e8/13a.png 200w,\n/static/c69cc11572b1f3bcf1a5ca2dc8bc32bf/e17e5/13a.png 400w,\n/static/c69cc11572b1f3bcf1a5ca2dc8bc32bf/5a190/13a.png 800w,\n/static/c69cc11572b1f3bcf1a5ca2dc8bc32bf/c1b63/13a.png 1200w,\n/static/c69cc11572b1f3bcf1a5ca2dc8bc32bf/29007/13a.png 1600w,\n/static/c69cc11572b1f3bcf1a5ca2dc8bc32bf/6c86f/13a.png 1720w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Data in the cache is organized by query. Because <i>Person</i> objects have an identifying field <i>id</i> which is type <i>ID</i>, if the same object is returned by multiple queries, Apollo is able to combine them into one.\nBecause of this, doing <i>findPerson</i> queries for the address details of Arto Hellas has updated the address details also for the query <i>allPersons</i>.</p>\n<h3>Doing mutations</h3>\n<p>Let's implement functionality for adding new persons. </p>\n<p> In the previous chapter we hardcoded the parameters for mutations. Now we need a version of the addPerson mutation which uses <a href=\"https://graphql.org/learn/queries/#variables\">variables</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">CREATE_PERSON</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nmutation createPerson($name: String!, $street: String!, $city: String!, $phone: String) {\n  addPerson(\n    name: $name,\n    street: $street,\n    city: $city,\n    phone: $phone\n  ) {\n    name\n    phone\n    id\n    address {\n      street\n      city\n    }\n  }\n}\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<!-- Mutaatioiden tekemiseen sopivan toiminnallisuuden tarjoaa hook-funktio [useMutation](https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#usemutation).  -->\n<p>The hook-function <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#usemutation\">useMutation</a> provides the functionality for making mutations. </p>\n<!-- Tehdään sovellukseen uusi komponentti uuden henkilön lisämiseen: -->\n<p>Let's create a new component for adding a new person to the directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> gql<span class=\"token punctuation\">,</span> useMutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">CREATE_PERSON</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  // ...\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PersonForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>phone<span class=\"token punctuation\">,</span> setPhone<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>street<span class=\"token punctuation\">,</span> setStreet<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>city<span class=\"token punctuation\">,</span> setCity<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> createPerson <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_PERSON</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">,</span> street<span class=\"token punctuation\">,</span> city <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setPhone</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setStreet</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setCity</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>create <span class=\"token keyword\">new</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>submit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          name <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          phone <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>phone<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPhone</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          street <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>street<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setStreet</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          city <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>city<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCity</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">'submit'</span><span class=\"token operator\">></span>add<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PersonForm</code></pre></div>\n<!-- Lomakkeen koodi on suoraviivainen, mielenkiintoiset rivit on korostettu. Mutaation suorittava funktio saadaan luotua _useMutation_-hookin avulla. Hook palauttaa kyselyfunktion <i>taulukon</i> ensimmäisenä alkiona: -->\n<p>The code of the form is straightforward and the interesting lines have been highlighted.\nWe can define mutation function using the <em>useMutation</em>-hook.\nThe hook returns an <i>array</i>, first element of which contains the result of the mutation.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> createPerson <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_PERSON</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- Kyselyä tehtäessä määritellään kyselyn muuttujille arvot: -->\n<p>The query variables receive values when the query is made:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">,</span> street<span class=\"token punctuation\">,</span> city <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>New persons are added just fine, but the screen is not updated. The reason being that Apollo Client cannot automatically update the cache of an application, so it still contains the state from before the mutation.\nWe could update the screen by reloading the page, as the cache is emptied when the page is reloaded. However there must be a better way to do this. </p>\n<h3>Updating the cache</h3>\n<p>There are few different solutions for this. One way is to make the query for all persons <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/data/queries/#polling\">poll</a> the server, or make the query repeatedly. </p>\n<p>The change is small. Let's set the query to poll every two seconds: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    pollInterval<span class=\"token operator\">:</span> <span class=\"token number\">2000</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Persons persons <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>PersonForm <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The solution is simple, and every time a user adds a new person, it appears immediately on the screens of all users. </p>\n<p>The bad side of the solution is all the pointless web traffic. </p>\n<!-- Toinen helppo tapa välimuistin synkronoimiseen on määritellä _useMutation_-hookin option [refetchQueries](https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#params-2) avulla, että kaikki henkilöt hakeva kysely tulee suorittaa mutaation yhteydessä uudelleen: -->\n<p>Another easy way to keep the cache in sync is to use the <em>useMutation</em>-hook's <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#params-2\">refetchQueries</a> parameter to define, that the query fetching all persons is done again whenever a new person is created. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query  {\n    allPersons  {\n      name\n      phone\n      id\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PersonForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> createPerson <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_PERSON</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    refetchQueries<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> query<span class=\"token operator\">:</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The pros and cons of this solution are almost opposite of the previous one. There is no extra web traffic, because queries are not done just in case.  However if one user now updates the state of the server, the changes do not show to other users immediately. </p>\n<p>There are other ways to update the cache. More about those later in this part. </p>\n<!-- Sovellukseen on tällä hetkellä määritelty kyselyjä komponenttien koodin sekaan. Eriytetään kyselyjen määrittely omaan tiedostoonsa <i>queries.js</i>: -->\n<p>At the moment in our code queries and component are defined in the same place.\nLet's separate the query definitions into their own file <i>queries.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> gql  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    // ...\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FIND_PERSON</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query findPersonByName($nameToSearch: String!) {\n    // ...\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">CREATE_PERSON</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  mutation createPerson($name: String!, $street: String!, $city: String!, $phone: String) {\n    // ...\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<!-- Jokainen komponentti importtaa tarvitsemansa kyselyt: -->\n<p>Each component then imports the queries it needs:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./queries'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The current code of the application can be found on <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-frontend/tree/part8-2\">Github</a> branch <i>part8-2</i>.</p>\n<h4>Handling mutation errors</h4>\n<!-- Jos yritämme luoda epävalidia henkilöä, seurauksena on poikkeus ja koko sovellus hajoaa -->\n<p>Trying to create a person with invalid data causes an error, and the whole application breaks</p>\n<picture><img src=\"/static/04ec18f006e9e6781fca9374211ef07e/5a190/14ea.png\" srcset=\"/static/04ec18f006e9e6781fca9374211ef07e/772e8/14ea.png 200w,\n/static/04ec18f006e9e6781fca9374211ef07e/e17e5/14ea.png 400w,\n/static/04ec18f006e9e6781fca9374211ef07e/5a190/14ea.png 800w,\n/static/04ec18f006e9e6781fca9374211ef07e/c1b63/14ea.png 1200w,\n/static/04ec18f006e9e6781fca9374211ef07e/29007/14ea.png 1600w,\n/static/04ec18f006e9e6781fca9374211ef07e/b54cd/14ea.png 1662w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- Poikkeus on syytä käsitellä. _useMutation_-hookin [option](https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#params-2) _onError_ avulla on mahdollista rekisteröidä mutaatioille virheenkäsittelijäfunktio. -->\n<p>We should handle the exception. We can register an error handler function to the mutation using <em>useMutation</em>-hook's <em>onError</em> <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#params-2\">option</a>.</p>\n<!-- Rekisteröidään mutaatiolle virheidenkäsittelijä, joka asettaa virheestä kertovan viestin propsina saaman funktion _setError_ avulla: -->\n<p>Let's register the mutation an error handler, which uses the <em>setError</em>\nfunction it receives as a parameter to set an error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PersonForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> setError <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... </span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> createPerson <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_PERSON</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    refetchQueries<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  <span class=\"token punctuation\">{</span>query<span class=\"token operator\">:</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>graphQLErrors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- Renderlöidään mahdollinen virheilmoitus näytölle -->\n<p>We can then render the error message on the screen as necessary</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorMessage<span class=\"token punctuation\">,</span> setErrorMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">notify</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Notify errorMessage<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Persons persons <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>PersonForm setError<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>notify<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Notify</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>errorMessage <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Now the user is informed about an error with a simple notification. </p>\n<picture><img src=\"/static/e1e096a90a3b8783af211703c5088439/5a190/15.png\" srcset=\"/static/e1e096a90a3b8783af211703c5088439/772e8/15.png 200w,\n/static/e1e096a90a3b8783af211703c5088439/e17e5/15.png 400w,\n/static/e1e096a90a3b8783af211703c5088439/5a190/15.png 800w,\n/static/e1e096a90a3b8783af211703c5088439/c1b63/15.png 1200w,\n/static/e1e096a90a3b8783af211703c5088439/b1001/15.png 1380w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The current code of the application can be found on <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-frontend/tree/part8-3\">Github</a> branch <i>part8-3</i>.</p>\n<h3>Updating a phone number</h3>\n<p>Let's add the possibility to change the phone numbers of persons to our application. The solutions is almost identical to the one we used for adding new persons. </p>\n<p>Again, the mutation requires parameters.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">EDIT_NUMBER</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  mutation editNumber($name: String!, $phone: String!) {\n    editNumber(name: $name, phone: $phone)  {\n      name\n      phone\n      address {\n        street\n        city\n      }\n      id\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>The <i>PhoneForm</i> component responsible for the change is straightforward. The form has fields for the person's name and new phone number, and calls the <em>changeNumber</em> function. The function is done using the <em>useMutation</em>-hook.\nInteresting lines on the code have been highlighted.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">EDIT_NUMBER</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../queries'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PhoneForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>phone<span class=\"token punctuation\">,</span> setPhone<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> changeNumber <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">EDIT_NUMBER</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">changeNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> phone <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setPhone</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>change number<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>submit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          name <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          phone <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>phone<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPhone</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">'submit'</span><span class=\"token operator\">></span>change number<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PhoneForm</code></pre></div>\n<p>It looks bleak, but it works: </p>\n<picture><img src=\"/static/43b4ec44f92a0cabc388c552e309ddfc/5a190/22a.png\" srcset=\"/static/43b4ec44f92a0cabc388c552e309ddfc/772e8/22a.png 200w,\n/static/43b4ec44f92a0cabc388c552e309ddfc/e17e5/22a.png 400w,\n/static/43b4ec44f92a0cabc388c552e309ddfc/5a190/22a.png 800w,\n/static/43b4ec44f92a0cabc388c552e309ddfc/c1b63/22a.png 1200w,\n/static/43b4ec44f92a0cabc388c552e309ddfc/add4c/22a.png 1452w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- Kun numero muutetaan, päivittyy se hieman yllättäen automaattisesti komponentin <i>Persons</i> renderöimään nimien ja numeroiden listaan. Tämä johtuu siitä, että koska henkilöillä on identifioiva, tyyppiä <i>ID</i> oleva kenttä, päivittyy henkilö välimuistissa uusilla tiedoilla päivitysoperaation yhteydessä.  -->\n<p>Surprisingly, when person's number is changed the new number automatically appears on the list of persons rendered by the <i>Persons</i> component.\nThis happens because each person has an identifying field of type <i>ID</i>, so the person's details saved to the cache update automatically when they are changed with the mutation. </p>\n<p>The current code of the application can be found on <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-frontend/tree/part8-4\">Github</a> branch <i>part8-4</i>.</p>\n<!-- Sovelluksessa on  vielä pieni ongelma. Jos yritämme vaihtaa olemattomaan nimeen liittyvän puhelinnumeron, ei mitään näytä tapahtuvan. Syynä tälle on se, että jos nimeä vastaavaa henkilöä ei löydy, vastataan kyselyyn <i>null</i>: -->\n<p>Our application still has one small flaw. If we try to change the phone number for a name which does not exist, nothing seems to happen.\nThis happens because if a person with the given name cannot be found,\nthe mutation response is <i>null</i>:</p>\n<picture><img src=\"/static/617aa9dac27c653efdfe7d520be0caae/5a190/23ea.png\" srcset=\"/static/617aa9dac27c653efdfe7d520be0caae/772e8/23ea.png 200w,\n/static/617aa9dac27c653efdfe7d520be0caae/e17e5/23ea.png 400w,\n/static/617aa9dac27c653efdfe7d520be0caae/5a190/23ea.png 800w,\n/static/617aa9dac27c653efdfe7d520be0caae/c1b63/23ea.png 1200w,\n/static/617aa9dac27c653efdfe7d520be0caae/5df5d/23ea.png 1572w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- Koska kyseessä ei ole GraphQL:n kannalta virhetilanne, ei _onError_-virheenkäsittelijän rekisteröimisestä tässä tilanteessa hyötyä. -->\n<p>For GraphQL this is not an error, so registering an <em>onError</em> error handler is not useful. </p>\n<!-- Voimme generoida virheilmoituksen _useMutation_-hookin toisena parametrina palauttaman mutaation tuloksen kertovan olion _result_ avulla. -->\n<p>We can use the <em>result</em> field returned by the <em>useMutation</em>-hook as its second parameter to generate an error message. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PhoneForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> setError <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>phone<span class=\"token punctuation\">,</span> setPhone<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> changeNumber<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">EDIT_NUMBER</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&amp;&amp;</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>editNumber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person not found'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- Jos henkilöä ei löytynt, eli kyselyn tulos _result.data.editNumber_ on _null_, asettaa komponentti propseina saamansa callback-funktion avulla sopivan virheilmoituksen. Virheilmoituksen asettamista kontrolloidaan jälleen useEffect-hookin avulla, eli virheviesti halutaan asetaa ainoastaan jos mutaation tulos _result.data_ muuttuu. -->\n<p>If a person cannot be found, or the <em>result.data.editNumber</em> is <em>null</em>, the component uses the callback-function it received as props to set a suitable error message.\nWe want to set the error message only when the result of the mutation\n<em>result.data</em> changes, so we use the useEffect-hook to control setting the error message. </p>\n<!-- useEffect aiheuttaa ESLint-virheilmoituksen: -->\n<p>Using useEffect causes an ESLint warning:</p>\n<picture><img src=\"/static/0d1bc1131a664f37327ac2854060ce6c/5a190/41ea.png\" srcset=\"/static/0d1bc1131a664f37327ac2854060ce6c/772e8/41ea.png 200w,\n/static/0d1bc1131a664f37327ac2854060ce6c/e17e5/41ea.png 400w,\n/static/0d1bc1131a664f37327ac2854060ce6c/5a190/41ea.png 800w,\n/static/0d1bc1131a664f37327ac2854060ce6c/c1b63/41ea.png 1200w,\n/static/0d1bc1131a664f37327ac2854060ce6c/4a00e/41ea.png 1406w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- Varoitus on aiheeton, ja pääsemme helpoimmalla ignoroimalla ESLint-säännön riviltä: -->\n<p>The warning is pointless, and the easiest solution is to ignore the ESLint rule on the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>editNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name not found'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// eslint-disable-line </span></span></code></pre></div>\n<!-- Voisimme yrittää päästä varoituksesta eroon lisäämällä funktion _notify_ useEffectin toisena parametrina olevaan taulukkoon: -->\n<p>We could try to get rid of the warning by adding the <em>setError</em> function to useEffect's second parameter array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>editNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name not found'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<!-- Tämä ratkaisu ei kuitenkaan toimi, ellei _notify_-funktiota ole määritelty [useCallback](https://reactjs.org/docs/hooks-reference.html#usecallback)-funktioon käärittynä. Jos näin ei tehdä, seurauksena on ikuinen luuppi, sillä aina kun komponentti _App_ renderöidään uudelleen notifikaation poistamisen jälkeen, syntyy <i>uusi versio</i> funktiosta _notify_ ja se taas aiheuttaa efektifunktion uudelleensuorituksen ja taas uuden notifikaation... -->\n<p>However this solution does not work if the <em>notify</em>-function is not wrapped to a <a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\">useCallback</a>-function.  If its not, this results to an endless loop. When the <em>App</em> component is rerendered after a notification is removed, a <i>new version</i> of <em>notify</em> gets created which causes the effect function to be executed which causes a new notification and so on an so on...</p>\n<p>The current code of the application can be found on <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-frontend/tree/part8-5\">Github</a> branch <i>part8-5</i>.</p>\n<h3>Apollo Client and the applications state</h3>\n<p>In our example, management of the applications state has mostly become the responsibility of Apollo Client. This is quite typical solution for GraphQL applications.\nOur example uses the state of the React components only to manage the state of a form and to show error notifications. When using GraphQL it can be, that there are no more justifiable reasons to move the management of the applications state to Redux at all. </p>\n<p>When necessary Apollo enables saving the applications local state to <a href=\"https://www.apollographql.com/docs/react/local-state/local-state-management/\">Apollo cache</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 8.8.-8.12.</h3>\n<p>Through these exercises we'll implement a frontend for the GraphQL-library. </p>\n<p>Take <a href=\"https://github.com/fullstack-hy2020/library-frontend\">this project</a> for a start of your application. </p>\n<p>You can implement your application either using the render prop -components <i>Query</i> and <i>Mutation</i> of the Apollo Client, or using the hooks provided by Apollo client 3.0 beta version. </p>\n<h4>8.8: Authors view</h4>\n<p>Implement an Authors view to show the details of all authors on a page as follows: </p>\n<picture><img src=\"/static/cd63490814854dddf60e7863239c3276/5a190/16.png\" srcset=\"/static/cd63490814854dddf60e7863239c3276/772e8/16.png 200w,\n/static/cd63490814854dddf60e7863239c3276/e17e5/16.png 400w,\n/static/cd63490814854dddf60e7863239c3276/5a190/16.png 800w,\n/static/cd63490814854dddf60e7863239c3276/c1b63/16.png 1200w,\n/static/cd63490814854dddf60e7863239c3276/e8814/16.png 1392w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.9: Books view</h4>\n<p>Implement a Books view to show on a page all other details of all books except their genres. </p>\n<picture><img src=\"/static/8aee30985901fcee02edb80db9a31557/5a190/17.png\" srcset=\"/static/8aee30985901fcee02edb80db9a31557/772e8/17.png 200w,\n/static/8aee30985901fcee02edb80db9a31557/e17e5/17.png 400w,\n/static/8aee30985901fcee02edb80db9a31557/5a190/17.png 800w,\n/static/8aee30985901fcee02edb80db9a31557/c1b63/17.png 1200w,\n/static/8aee30985901fcee02edb80db9a31557/e8814/17.png 1392w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.10: Adding a book</h4>\n<p>Implement a possibility to add new books to your application. The functionality can look like this: </p>\n<picture><img src=\"/static/80c3fc1431e121db93a23f1b306bb64f/5a190/18.png\" srcset=\"/static/80c3fc1431e121db93a23f1b306bb64f/772e8/18.png 200w,\n/static/80c3fc1431e121db93a23f1b306bb64f/e17e5/18.png 400w,\n/static/80c3fc1431e121db93a23f1b306bb64f/5a190/18.png 800w,\n/static/80c3fc1431e121db93a23f1b306bb64f/c1b63/18.png 1200w,\n/static/80c3fc1431e121db93a23f1b306bb64f/58354/18.png 1396w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Make sure that the Authors and Books views are kept up to date after a new book is added. </p>\n<p>In case of problems when making queries or mutations, check from developer console what the server response is:</p>\n<picture><img src=\"/static/a5711bd7668847e43a2de06d89b4019a/5a190/42ea.png\" srcset=\"/static/a5711bd7668847e43a2de06d89b4019a/772e8/42ea.png 200w,\n/static/a5711bd7668847e43a2de06d89b4019a/e17e5/42ea.png 400w,\n/static/a5711bd7668847e43a2de06d89b4019a/5a190/42ea.png 800w,\n/static/a5711bd7668847e43a2de06d89b4019a/c1b63/42ea.png 1200w,\n/static/a5711bd7668847e43a2de06d89b4019a/29007/42ea.png 1600w,\n/static/a5711bd7668847e43a2de06d89b4019a/6052f/42ea.png 2030w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.11: Authors birth year</h4>\n<p>Implement a possibility to set authors birth year. You can create a new view for setting the birth year, or place it on the Authors view: </p>\n<picture><img src=\"/static/924bdbe2b19fd91f5ea4092feddee1d5/5a190/20.png\" srcset=\"/static/924bdbe2b19fd91f5ea4092feddee1d5/772e8/20.png 200w,\n/static/924bdbe2b19fd91f5ea4092feddee1d5/e17e5/20.png 400w,\n/static/924bdbe2b19fd91f5ea4092feddee1d5/5a190/20.png 800w,\n/static/924bdbe2b19fd91f5ea4092feddee1d5/c1b63/20.png 1200w,\n/static/924bdbe2b19fd91f5ea4092feddee1d5/d4b10/20.png 1394w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Make sure that the Authors view is kept up to date after setting a birth year. </p>\n<h4>8.12: Authors birth year advanced</h4>\n<p>Change the birth year form so that a birth year can be set only for an existing author. Use <a href=\"https://reactjs.org/docs/forms.html#the-select-tag\">select-tag</a>, <a href=\"https://github.com/JedWatson/react-select\">react-select</a> library or some other mechanism. </p>\n<p>A solution using the react-select -library looks as follows: </p>\n<picture><img src=\"/static/a3ccc596485cf42701e33848460102d1/5a190/21.png\" srcset=\"/static/a3ccc596485cf42701e33848460102d1/772e8/21.png 200w,\n/static/a3ccc596485cf42701e33848460102d1/e17e5/21.png 400w,\n/static/a3ccc596485cf42701e33848460102d1/5a190/21.png 800w,\n/static/a3ccc596485cf42701e33848460102d1/c1b63/21.png 1200w,\n/static/a3ccc596485cf42701e33848460102d1/b79a5/21.png 1372w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/255b3daaf137d97fa5b78561e6ef4e3f/part-8.svg"},"part":8,"letter":"b","lang":"en"}}},"pageContext":{"part":8,"letter":"b","lang":"en"}}}