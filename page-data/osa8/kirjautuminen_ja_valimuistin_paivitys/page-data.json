{"componentChunkName":"component---src-templates-content-template-js","path":"/osa8/kirjautuminen_ja_valimuistin_paivitys","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Sovelluksen frontend toimii puhelinluettelon näyttämisen osalta päivitetyn palvelimen kanssa. Jotta luetteloon voitaisiin lisätä henkilöitä, tulee backendiin toteuttaa kirjautuminen.</p>\n<h3>Käyttäjän kirjautuminen</h3>\n<p>Lisätään sovelluksen tilaan muuttuja <em>token</em>, joka tallettaa tokenin siinä vaiheessa kun käyttäjä on kirjautunut. Jos <em>token</em> ei ole määritelty, näytetään kirjautumisesta huolehtiva komponentti <i>LoginForm</i>, joka saa parametriksi virheenkäsittelijän sekä funktion <em>setToken</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">,</span> setToken<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Notify errorMessage<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>LoginForm\n          setToken<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setToken<span class=\"token punctuation\">}</span>\n          setError<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>notify<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Määritellään kirjautumisen suorittava mutaatio</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LOGIN</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password)  {\n      value\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Kirjautumisesta huolehtiva komponentti <em>LoginForm</em> toimii melko samalla tavalla kuin aiemmat mutaatioista huolehtivat komponentit. Mielenkiintoiset rivit on korostettu koodissa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">LOGIN</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../queries'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> setError<span class=\"token punctuation\">,</span> setToken <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">,</span> setUsername<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> login<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOGIN</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>graphQLErrors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">.</span>value</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phonenumbers-user-token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// eslint-disable-line</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>submit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          password <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">'password'</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">'submit'</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoginForm</code></pre></div>\n<p>Käytössä on jälleen efektihookki, jonka avulla asetetaan tokenin arvo komponentin <em>App</em> tilaan sekä local storageen siinä vaiheessa kun palvelin on vastannut mutaatioon. Efektihookki on tarpeen, jotta sovellus ei joutuisi ikuiseen renderöintilooppiin.</p>\n<p>Lisätään sovellukselle myös nappi, jonka avulla kirjautunut käyttäjä voi kirjautua ulos. Napin klikkauskäsittelijässä asetetaan  <em>token</em> tilaan null, poistetaan token local storagesta ja resetoidaan Apollo clientin välimuisti. Tämä on <a href=\"https://www.apollographql.com/docs/react/networking/authentication/#reset-store-on-logout\">tärkeää</a>, sillä joissain kyselyissä välimuistiin on saatettu hakea dataa, johon vain kirjaantuneella käyttäjällä on oikeus päästä käsiksi.</p>\n<p>Välimuistin nollaaminen tapahtuu Apollon <em>client</em>-objektin metodilla <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/api/core/ApolloClient/#ApolloClient.resetStore\">resetStore</a>, clientiin taas päästään käsiksi hookilla\n<a href=\"https://www.apollographql.com/docs/react/api/react-hooks/#useapolloclient\">useApolloClient</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">,</span> setToken<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorMessage<span class=\"token punctuation\">,</span> setErrorMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token function\">useApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    client<span class=\"token punctuation\">.</span><span class=\"token function\">resetStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sovelluksen tämän vaiheen koodi <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-frontend/tree/part8-6\">githubissa</a>, branchissa <i>part8-6</i>.</p>\n<h3>Tokenin lisääminen headeriin</h3>\n<p>Backendin muutosten jälkeen uusien henkilöiden lisäys puhelinluetteloon vaatii sen, että käyttäjän token lähetetään pyynnön mukana. </p>\n<p>Tämä edellyttää pientä muutosta tiedostossa <i>index.js</i> olevaan ApolloClient-olion konfiguraatioon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-link-context'</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> authLink <span class=\"token operator\">=</span> <span class=\"token function\">setContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> headers <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phonenumbers-user-token'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">...</span>headers<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      authorization<span class=\"token operator\">:</span> token <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> httpLink <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:4000'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  link<span class=\"token operator\">:</span> authLink<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>httpLink<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>client</em>-olion muodostamisen yhteydessä oleva toinen parametri <em>link</em> määrittelee, miten apollo on yhteydessä palvelimeen. Nyt normaalia <a href=\"https://www.apollographql.com/docs/link/links/http.htm\">httpLink</a>-yhteyttä muokataan siten, että pyyntöjen mukaan <a href=\"https://www.apollographql.com/docs/react/networking/authentication/#header\">asetetaan headerille</a> <i>authorization</i> arvoksi localStoragessa mahdollisesti oleva token.</p>\n<p>Asennetaan vielä muutoksen tarvitsema kirjasto</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> apollo-link-context</code></pre></div>\n<p>Uusien henkilöiden lisäys ja numeroiden muuttaminen toimii taas. Sovellukseen jää kuitenkin yksi ongelma. Jos yritämme lisätä puhelinnumerotonta henkilöä, se ei onnistu.</p>\n<picture><img src=\"/static/e35da7a06eae17e19eb71dacbb437782/5a190/25e.png\" srcset=\"/static/e35da7a06eae17e19eb71dacbb437782/772e8/25e.png 200w,\n/static/e35da7a06eae17e19eb71dacbb437782/e17e5/25e.png 400w,\n/static/e35da7a06eae17e19eb71dacbb437782/5a190/25e.png 800w,\n/static/e35da7a06eae17e19eb71dacbb437782/c1b63/25e.png 1200w,\n/static/e35da7a06eae17e19eb71dacbb437782/86a1e/25e.png 1296w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Validointi epäonnistuu, sillä frontend lähettää kentän <em>phone</em> arvona tyhjän merkkijonon. </p>\n<p>Muutetaan uuden henkilön luovaa funktiota siten, että se asettaa kentälle <em>phone</em>  arvon <em>null</em>, jos käyttäjä ei ole syöttänyt kenttään mitään:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PersonForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> setError <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> \n<span class=\"gatsby-highlight-code-line\">        name<span class=\"token punctuation\">,</span> street<span class=\"token punctuation\">,</span> city<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        phone<span class=\"token operator\">:</span> phone<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> phone <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span></span>      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sovelluksen tämän vaiheen koodi <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-frontend/tree/part8-7\">githubissa</a>, branchissa <i>part8-7</i>.</p>\n<h3>Välimuistin päivitys revisited</h3>\n<p>Uusien henkilöiden lisäyksen yhteydessä on siis\n<a href=\"/osa8/react_ja_graph_ql#valimuistin-paivitys\">päivitettävä</a> Apollo clientin välimuisti. Päivitys tapahtuu määrittelemällä mutaation yhteydessä option <em>refetchQueries</em> avulla, että kysely <em>ALL_PERSONS</em> on suoritettava uudelleen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PersonForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> setError <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> createPerson <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_PERSON</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    refetchQueries<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  <span class=\"token punctuation\">{</span>query<span class=\"token operator\">:</span> <span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>graphQLErrors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Lähestymistapa on kohtuullisen toimiva, ikävänä puolena on toki se, että päivityksen yhteydessä suoritetaan aina myös kysely. </p>\n<p>Ratkaisua on mahdollista optimoida hoitamalla välimuistin päivitys itse. Tämä tapahtuu määrittelemällä mutaatiolle sopiva <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/api/react/hooks/#options-2\">update</a>-callback, jonka Apollo suorittaa mutaation päätteeksi: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PersonForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> setError <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> createPerson <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_PERSON</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>graphQLErrors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">update</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">store<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> dataInStore <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">readQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query<span class=\"token operator\">:</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">writeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        query<span class=\"token operator\">:</span> <span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">...</span>dataInStore<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">          allPersons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>dataInStore<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>addPerson <span class=\"token punctuation\">]</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>Callback-funktio saa parametriksi viitteen välimuistiin sekä mutaation mukana palautetun datan, eli esimerkkimme tapauksessa lisätyn käyttäjän.</p>\n<p>Koodi lukee funktion <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/caching/cache-interaction/#readquery\">readQuery</a> avulla kyselyn <em>ALL_PERSONS</em> välimuistiin talletetun tilan ja päivittää välimuistin funktion <a href=\"https://www.apollographql.com/docs/react/v3.0-beta/caching/cache-interaction/#writequery-and-writefragment\">writeQuery</a> avulla lisäten henkilöiden joukkoon mutaation lisäämän henkilön.</p>\n<p>On myös olemassa tilanteita, joissa ainoa järkevä tapa saada välimuisti pidettyä ajantasaisena on <em>update</em>-callbackillä tehtävä päivitys. </p>\n<p>Tarvittaessa välimuisti on mahdollista kytkeä pois päältä joko koko sovelluksesta tai yksittäisiltä kyselyiltä määrittelemällä välimuistin käyttöä kontrolloivalle <a href=\"https://www.apollographql.com/docs/react/data/queries/#configuring-fetch-logic\">fetchPolicy</a>:lle arvo <em>no-cache</em>. </p>\n<p>Välimuistin kanssa kannattaa olla tarkkana. Välimuistissa oleva epäajantasainen data voi aiheuttaa vaikeasti havaittavia bugeja. Kuten tunnettua, välimuistin ajantasalla pitäminen on erittäin haastavaa. Koodareiden joukossa kulkevan kansanviisauden mukaan </p>\n<blockquote>\n<p><i>There are only two hard things in Computer Science: cache invalidation and naming things.</i> Katso lisää <a href=\"https://www.google.com/search?q=two+hard+things+in+Computer+Science&#x26;oq=two+hard+things+in+Computer+Science\">täältä</a>.</p>\n</blockquote>\n<p>Sovelluksen tämän vaiheen koodi <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-frontend/tree/part8-8\">githubissa</a>, branchissa <i>part8-8</i>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtävät 8.17.-8.22.</h3>\n<h4>8.17 Kirjojen lista</h4>\n<p>Backendin muutosten jälkeen kirjojen lista ei enää toimi. Korjaa se.</p>\n<h4>8.18 Kirjautuminen</h4>\n<p>Kirjojen lisäys ja kirjailijan syntymävuoden muutos eivät toimi, sillä ne edellyttävät kirjautumista. </p>\n<p>Toteuta sovellukseesi kirjautuminen ja korjaa mutaatiot.</p>\n<p>Sovelluksesi ei ole pakko käsitellä validointivirheitä järkevästi.</p>\n<p>Voit päättää itse miltä kirjautuminen näyttää käyttöliittymässä. Eräs mahdollinen ratkaisu on tehdä kirjautumislomakkeesta erillinen näkymä jonne pääsee sovelluksen navigaatiomenusta:</p>\n<picture><img src=\"/static/ae6440af26b9fab098dac489635df2d8/5a190/26.png\" srcset=\"/static/ae6440af26b9fab098dac489635df2d8/772e8/26.png 200w,\n/static/ae6440af26b9fab098dac489635df2d8/e17e5/26.png 400w,\n/static/ae6440af26b9fab098dac489635df2d8/5a190/26.png 800w,\n/static/ae6440af26b9fab098dac489635df2d8/c1b63/26.png 1200w,\n/static/ae6440af26b9fab098dac489635df2d8/29007/26.png 1600w,\n/static/ae6440af26b9fab098dac489635df2d8/c4842/26.png 1634w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kirjatumislomake</p>\n<picture><img src=\"/static/b58de44d2b5381c18a235232acd2dee0/5a190/27.png\" srcset=\"/static/b58de44d2b5381c18a235232acd2dee0/772e8/27.png 200w,\n/static/b58de44d2b5381c18a235232acd2dee0/e17e5/27.png 400w,\n/static/b58de44d2b5381c18a235232acd2dee0/5a190/27.png 800w,\n/static/b58de44d2b5381c18a235232acd2dee0/c1b63/27.png 1200w,\n/static/b58de44d2b5381c18a235232acd2dee0/29007/27.png 1600w,\n/static/b58de44d2b5381c18a235232acd2dee0/81315/27.png 1656w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kun käyttäjä on kirjautuneena, muutetaan navigaatio näyttämään ne toiminnot, jotka ovat vain kirjautuneen käytettävissä</p>\n<picture><img src=\"/static/5277ba8cd826fcd16cff384820343666/5a190/28.png\" srcset=\"/static/5277ba8cd826fcd16cff384820343666/772e8/28.png 200w,\n/static/5277ba8cd826fcd16cff384820343666/e17e5/28.png 400w,\n/static/5277ba8cd826fcd16cff384820343666/5a190/28.png 800w,\n/static/5277ba8cd826fcd16cff384820343666/c1b63/28.png 1200w,\n/static/5277ba8cd826fcd16cff384820343666/29007/28.png 1600w,\n/static/5277ba8cd826fcd16cff384820343666/1d499/28.png 1632w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.19 genren kirjat, osa 1</h4>\n<p>Laajenna sovellustasi siten, että kirjojen näkymästä voidaan rajata näytettävä kirjalista ainoastaan niihin, jotka kuuluvat valittuun genreen. Toteutuksesi voi näyttää seuraavalta:</p>\n<picture><img src=\"/static/44fc6b0d6b88ef933fc2f26acec86a20/5a190/30.png\" srcset=\"/static/44fc6b0d6b88ef933fc2f26acec86a20/772e8/30.png 200w,\n/static/44fc6b0d6b88ef933fc2f26acec86a20/e17e5/30.png 400w,\n/static/44fc6b0d6b88ef933fc2f26acec86a20/5a190/30.png 800w,\n/static/44fc6b0d6b88ef933fc2f26acec86a20/c1b63/30.png 1200w,\n/static/44fc6b0d6b88ef933fc2f26acec86a20/29007/30.png 1600w,\n/static/44fc6b0d6b88ef933fc2f26acec86a20/6a5c3/30.png 1646w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.20 genren kirjat</h4>\n<p>Tee sovellukseen näkymä, joka näyttää kirjautuneelle käyttäjälle käyttäjän lempigenreen kuuluvat kirjat.</p>\n<picture><img src=\"/static/136c0baca4e5a67ca4387cfa93b098e4/5a190/29.png\" srcset=\"/static/136c0baca4e5a67ca4387cfa93b098e4/772e8/29.png 200w,\n/static/136c0baca4e5a67ca4387cfa93b098e4/e17e5/29.png 400w,\n/static/136c0baca4e5a67ca4387cfa93b098e4/5a190/29.png 800w,\n/static/136c0baca4e5a67ca4387cfa93b098e4/c1b63/29.png 1200w,\n/static/136c0baca4e5a67ca4387cfa93b098e4/29007/29.png 1600w,\n/static/136c0baca4e5a67ca4387cfa93b098e4/5c263/29.png 1636w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.21 genren kirjat GraphQL:llä</h4>\n<p>Tietyn genren kirjoihin rajoittamisen voi tehdä kokonaan React-sovelluksen puolella. Voit merkitä tämän tehtävän, jos rajaat näytettävät kirjat tehtävässä 8.5 palvelimelle toteutetun suoran GraphQL-kyselyn avulla. </p>\n<p>Tämä <strong>tehtävä on haastava</strong> ja niin kurssin tässä vaiheessa jo kuuluukin olla. Muutama vihje</p>\n<ul>\n<li>Hookin <i>useQuery</i> käytön sijaan saattaa olla parempi tehdä kyselyitä <i>useLazyQuery</i>-hookin avulla</li>\n<li>GraphQL-kyselyjen tuloksia kannattaa joskus tallentaa komponentin tilaan</li>\n<li>Huomaa, että voit tehdä GraphQL-kyselyjä <i>useEffect</i>-hookissa (itse en tämän vuotisessa ratkaisussani tosin tehnyt kyselyjä useEffectissä)</li>\n<li><i>useEffect</i>-hookin <a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\">toisesta parametrista</a> voi olla tehtävässä apua, se tosin riippuu käyttämästäsi lähestymistavasta</li>\n</ul>\n<h4>8.22 kirjasuositukset, välimuistin ajantasaisuus</h4>\n<p>Jos haet kirjasuositukset GraphQL:llä, varmista jollain tavalla se, että kirjojen näkymä säilyy ajantasaisena. Eli kun lisäät uuden kirjan, päivittyy se kirjalistalle <strong>viimeistään</strong> siinä vaiheessa kun painat jotain genrevalintanappia. Ilman uuden genrevalinnan tekemistä, ei näkymän ole pakko päivittyä. </p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/255b3daaf137d97fa5b78561e6ef4e3f/part-8.svg"},"part":8,"letter":"d","lang":"fi"}}},"pageContext":{"part":8,"letter":"d","lang":"fi"}}}